#load "core/std"
#load "./module"

use core
use cbindgen

main :: () {
    path := module_path(#file);

    c_file_path := string.concat(path, "ncurses.c");

    result := generate_c_binding(.{
        output_file = c_file_path,
        foreign_block = ncurses.foreign_block,

        cast_map = .[
            .{ ncurses.WINDOW, "WINDOW *" },
        ],

        preamble = .[
"""
#include "ncurses.h"
#include <locale.h>

#define __get_stdscr() ((unsigned long int) stdscr)

void __get_yx    (WINDOW *w, int *y, int *x) { getyx(w, *y, *x); }
void __get_par_yx(WINDOW *w, int *y, int *x) { getparyx(w, *y, *x); }
void __get_beg_yx(WINDOW *w, int *y, int *x) { getbegyx(w, *y, *x); }
void __get_max_yx(WINDOW *w, int *y, int *x) { getmaxyx(w, *y, *x); }
"""
        ],

        custom_implementations = .[],
    });

    if !result {
        os.exit(1);
    }

    result = compile_c_file(c_file_path, string.concat(path, "onyx_ncurses"), libraries=.["ncursesw"]);
    if !result {
        os.exit(1);
    }

    os.remove_file(c_file_path);
}
